apply plugin: "cpp"
apply plugin: "google-test-test-suite"

// See: https://docs.gradle.org/current/userguide/native_software.html
// See: https://docs.gradle.org/current/dsl/org.gradle.language.cpp.tasks.CppCompile.html
def hasGTest = file("/usr/local/Cellar/gtest/include").directory

model {
    repositories {
        libs(PrebuiltLibraries) {
            // TODO dynamically download, brew install cunit, then use gradlew check
            if (hasGTest) {
                gtest {
                    headers.srcDir "/usr/local/Cellar/gtest/include"

                    binaries.withType(StaticLibraryBinary) {
                        staticLibraryFile = file("/usr/local/Cellar/gtest/libgtest.a")
                    }
                }
            }
        }
    }

    components {
        crackingTheCodeCpp(NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        srcDir "src/main/cpp"
                        include "**/*.cpp"
                    }

                    exportedHeaders {
                        srcDir "src/main/cpp/include"
                    }
                }
            }
        }
    }

    testSuites {
        if (hasGTest) {
            crackingTheCodeCppTest(GoogleTestTestSuiteSpec) {
                sources {
                    cpp {
                        source {
                            srcDir "src/test/cpp"
                            include "**/*.cpp"
                        }

                        exportedHeaders {
                            srcDir "src/test/cpp/include"
                        }
                    }
                }

                testing $.components.crackingTheCodeCpp
            }
        }
    }

    binaries {
        all {
            if (toolChain in Gcc || toolChain in Clang) {
                cCompiler.args "-Wall", "-Wextra", "-Werror", "-O3"
                cppCompiler.args "-std=c++1z", "-Wall", "-Wextra", "-Werror", "-O3"
            }

            if (toolChain in VisualCpp) {
                cCompiler.args "/Wall", "/Wx", "/O1", "/O2", "/Ox"
                cppCompiler.args "/Wall", "/Wx", "/O1", "/O2", "/Ox"
            }
        }

        if (hasGTest) {
            withType(GoogleTestTestSuiteBinarySpec) {
                lib library: "gtest", linkage: "static"
            }
        }
    }
}
