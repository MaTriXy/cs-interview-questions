import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

// For any project that contains tasks with type "JavaCompile"
// Eg. You would use "tasks.withType(JavaCompile)" in projects like Android projects
// that do not allow you to specify the "java" plugin
// See: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.compile.JavaCompile.html
tasks.withType(JavaCompile) {
    sourceCompatibility = rootProject.ext.javaVersion
    targetCompatibility = rootProject.ext.javaVersion

    // Show all warnings except boot classpath
    configure(options) {
        compilerArgs << "-Xlint:all"            // Turn on all warnings
        compilerArgs << "-Xlint:-options"       // Turn off "missing" bootclasspath warning
        compilerArgs << "-Werror"               // Turn warnings into errors
        compilerArgs << "-Xdiags:verbose"       // Turn on verbose errors
        encoding = "utf-8"
        incremental = true
        fork = true
    }
}

// For any project that contains tasks with type "GroovyCompile"
// Eg. You would use "tasks.withType(GroovyCompile)" in projects like Android projects
// that do not allow you to specify the "groovy" plugin
// See: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.compile.GroovyCompile.html
tasks.withType(GroovyCompile) {
    sourceCompatibility = rootProject.ext.javaVersion
    targetCompatibility = rootProject.ext.javaVersion

    // Show all warnings except boot classpath
    configure(options) {
        compilerArgs << "-Xlint:all"            // Turn on all warnings
        compilerArgs << "-Xlint:-options"       // Turn off "missing" bootclasspath warning
        compilerArgs << "-Werror"               // Turn warnings into errors
        compilerArgs << "-Xdiags:verbose"       // Turn on verbose errors
        encoding = "utf-8"
        incremental = true
        fork = true
    }

    configure(groovyOptions) {
        encoding = "utf-8"
        fork = true
    }
}

// For any project that contains tasks with type "Test"
// Eg. You would use "tasks.withType(Test)" in projects like Android projects
// that do not allow you to specify the "java" plugin
// See: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html
tasks.withType(Test) {
    testLogging {
        exceptionFormat = TestExceptionFormat.FULL
        showCauses = true
        showExceptions = true
        showStackTraces = true
        events = [TestLogEvent.FAILED, TestLogEvent.SKIPPED]
    }

    def maxWorkerCount = gradle.startParameter.maxWorkerCount
    maxParallelForks = (maxWorkerCount < 2) ? 1 : maxWorkerCount / 2
}

// For any project that contains tasks with type "JavaForkOptions"
// See: https://docs.gradle.org/current/javadoc/org/gradle/process/JavaForkOptions.html
tasks.withType(JavaForkOptions) {
    // Prevent forked processes from stealing focus (on MacOS at least)
    jvmArgs = ["-XX:+UseCompressedOops",
               "-Djava.awt.headless=true",
               "-Dapple.awt.UIElement=true"]
}
