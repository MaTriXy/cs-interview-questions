def hasCUnit = file("/usr/local/Cellar/cunit/2.1-3/include").exists()

model {
    repositories {
        libs(PrebuiltLibraries) {
            // TODO dynamically download, brew install cunit, then use gradlew check
            if (hasCUnit) {
                cunit {
                    headers.srcDir "/usr/local/Cellar/cunit/2.1-3/include"

                    binaries.withType(StaticLibraryBinary) {
                        staticLibraryFile = file("/usr/local/Cellar/cunit/2.1-3/lib/libcunit.a")
                    }
                }
            }
        }
    }

    components {
        crackingTheCodeC(NativeLibrarySpec) {
            sources {
                c {
                    source {
                        srcDir "src/main/c"
                        include "**/*.c"
                    }

                    exportedHeaders {
                        srcDir "src/main/c/include"
                    }
                }
            }
        }
    }

    testSuites {
        if (hasCUnit) {
            crackingTheCodeCTest(CUnitTestSuiteSpec) {
                sources {
                    c {
                        source {
                            srcDir "src/test/c"
                            include "**/*.c"
                        }

                        exportedHeaders {
                            srcDir "src/test/c/include"
                        }
                    }
                }

                testing $.components.crackingTheCodeC
            }
        }
    }

    binaries {
        all {
            if (toolChain in Gcc || toolChain in Clang) {
                cCompiler.args "-Wall", "-Wextra", "-Werror", "-O3"
            }

            if (toolChain in VisualCpp) {
                cCompiler.args "/Wall", "/Wx"
            }
        }

        if (hasCUnit) {
            withType(CUnitTestSuiteBinarySpec) {
                lib library: "cunit", linkage: "static"
            }
        }
    }
}
