buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    dependencies {
        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.8'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.12.0'
    }
}

repositories {
    maven { url 'https://plugins.gradle.org/m2/' }
}

apply plugin: 'c'
apply plugin: 'cpp'
apply plugin: 'pmd'
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'net.ltgt.errorprone'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.github.ben-manes.versions'

tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    // Show all warnings except boot classpath
    configure(options) {
        compilerArgs << '-Xlint:all'            // Turn on all warnings
        compilerArgs << '-Xlint:-options'       // Turn off 'missing' bootclasspath warning
        compilerArgs << '-Xlint:-processing'    // Turn off warning about not claiming annotations
        compilerArgs << '-Werror'               // Turn warnings into errors
        compilerArgs << '-Xdiags:verbose'       // Turn on verbose errors
        encoding = 'utf-8'
    }
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat 'full'
        showCauses true
        showExceptions true
        showStackTraces true
        showStandardStreams true
        events = ['failed', 'skipped']
    }
}

tasks.withType(JavaForkOptions) {
    // Prevent forked processes from stealing focus (on MacOS at least)
    jvmArgs '-Djava.awt.headless=true'
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['codeeval/**',
                              'crackingthecode/part3knowledgebased/**',
                              '**/Chapter7ObjectOrientedDesign**',
                              '**/Chapter11Testing**',
                              '**/Chapter12SystemDesignAndMemoryLimits**',
                              'projecteuler/**'])
        })
    }
}

dependencies {
    testCompile 'org.codehaus.groovy:groovy-all:2.4.6'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
}
