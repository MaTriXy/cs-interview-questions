plugins {
    id "com.gradle.build-scan" version "1.0"
    id "net.ltgt.errorprone" version "0.0.8"
    id "com.github.kt3k.coveralls" version "2.6.3"
    id "com.github.ben-manes.versions" version "0.12.0"
    id "net.saliman.cobertura" version "2.3.2"
      id 'net.researchgate.release' version '2.4.0'

    id "c"
    id "cunit-test-suite"
    id "cpp"
    id "google-test-test-suite"
    id "build-dashboard"
    id "java"
    id "groovy"
    id "pmd"
    id "jacoco"
    id "findbugs"
    id "checkstyle"
}

repositories {
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

apply from: rootProject.file("gradle/buildScan.gradle")
apply from: rootProject.file("gradle/compile.gradle")
apply from: rootProject.file("gradle/codeQuality.gradle")
apply from: rootProject.file("gradle/provided.gradle")

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

model {
    repositories {
        libs(PrebuiltLibraries) {
            // TODO dynamically download, brew install cunit, then use gradlew check
            cunit {
                headers.srcDir "/usr/local/Cellar/cunit/2.1-3/include"

                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("/usr/local/Cellar/cunit/2.1-3/lib/libcunit.a")
                }
            }

            gtest {
                headers.srcDir "/usr/local/Cellar/gtest/include"

                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("/usr/local/Cellar/gtest/libgtest.a")
                }
            }
        }
    }

    components {
        crackingTheCodeC(NativeLibrarySpec) {
            sources {
                c {
                    source {
                        srcDir "src/main/c"
                        include "**/*.c"
                    }

                    exportedHeaders {
                        srcDir "src/main/c/include"
                    }
                }
            }
        }

        crackingTheCodeCpp(NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        srcDir "src/main/cpp"
                        include "**/*.cpp"
                    }

                    exportedHeaders {
                        srcDir "src/main/cpp/include"
                    }
                }
            }
        }
    }

    testSuites {
        crackingTheCodeCTest(CUnitTestSuiteSpec) {
            sources {
                c {
                    source {
                        srcDir "src/test/c"
                        include "**/*.c"
                    }

                    exportedHeaders {
                        srcDir "src/test/c/include"
                    }
                }
            }

            testing $.components.crackingTheCodeC
        }

        crackingTheCodeCppTest(GoogleTestTestSuiteSpec) {
            sources {
                cpp {
                    source {
                        srcDir "src/test/cpp"
                        include "**/*.cpp"
                    }

                    exportedHeaders {
                        srcDir "src/test/cpp/include"
                    }
                }
            }

            testing $.components.crackingTheCodeCpp
        }
    }

    binaries {
        all {
            if (toolChain in Gcc || toolChain in Clang) {
                cCompiler.args "-Wall", "-Wextra", "-O3"
                cppCompiler.args "-std=c++14", "-Wall", "-Wextra", "-O3"
            }
        }

        withType(CUnitTestSuiteBinarySpec) {
            lib library: "cunit", linkage: "static"
        }

        withType(GoogleTestTestSuiteBinarySpec) {
            lib library: "gtest", linkage: "static"
        }
    }
}

dependencies {
    provided "com.google.code.findbugs:annotations:3.0.1"

    testCompile localGroovy()
    testCompile "org.spockframework:spock-core:1.0-groovy-2.4", { exclude module: "groovy-all" }
    testCompile "cglib:cglib-nodep:3.2.4"
    testCompile "nl.jqno.equalsverifier:equalsverifier:2.1.2"

    testRuntime "org.slf4j:slf4j-api:1.7.21"

    checkstyle "com.puppycrawl.tools:checkstyle:7.0"
}
